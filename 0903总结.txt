一、对象的上转型对象（以及下转型对象）

	1、上转型对象，父类引用指向子类对象，这样父类的引用可以在调用自己的被重写的方法时会调用引用向下转型的子类的方法

	2、上转型对象，父类引用想要调用子类中有而父类中没有的方法则需将父类引用向下转型为子类类型




二、final关键字与static关键字

	1、final关键字：
		①被final修饰的成员变量是常量，在被声明时就必须初始化 且只能被初始化依次 之后再为其赋值会报错

		②被final修饰的方法不能被重写，但是子类可以继承

		③被final修饰的类 不能被继承 为最终类

		④被final修饰的对象 其地址无法改变

	2、static关键字：
		①被static修饰的成员（成员方法或成员变量）是类类型的从属于类在类加载时就会被初始化，出生时间比构造器要早；另外一个类类型的变量可以通过类名.变量名访问（也可以通过对象.变量名访问一般不提倡）

		②static静态代码块 在类加载时会被执行一次，执行顺序按照类的加载过程，程序从main方法进入加载main所在的类，遇到继承则加载父类代码加载类的时候遇到静态代码块就执行静态代码块。

提示：java中的非成员变量或者非成员方法，又叫类成员或静态成员，属于类所有。当我们定义一个类此时就会为类成员分配内存空间，并且类方法会在类变量之后分配空间。





三、方法的重载（overlord）

	1、方法的重载发生在同一个类的中

	2、方法的参数列表

四、方法的重写（override）
	1、方法的重写发生在继承关系的父类与子类之间。

	2、子类重写父类的方法的要求：
		①方法的返回值类型、方法名、参数列表必须与父类被重写的方法完全一致

		②方法的访问修饰符不能低于父类被重写时的访问权限。

五、单例设计模式
	1、使用单例设计模式的目的：节省系统性能（内存与cpu占用率）

	2、两种单例设计模式：
		①懒汉式：需要才创建
		public class User {
			private static User user = null;
			private User(){}
			public static User getUser(){
				if(user == null){
				user = new User();
			}
			return user;
			}	
		}

		②饿汉式：定义的时候就创建好，需要直接拿
		public class User {
			private static User user = new User();
			private User(){}
			public static User getUser(){
				return user;
			}
		}
	总结：  这两种单态模式实现都是将自己类的对象变量 封装并static
	        并且将构造方法私有化
	        通过public的getUser方法 将对象的引用指向同一个对象
	        这里的同一个对象就有了两种实现方式
		    懒汉式就是将 将类类型的私有变量静态初始化为空 然后通过判断		如果为空则new一个不为空则返回初始化的那个（也就是说第一次		getUser方法就new一个user对象 第二次或者以后每次调用getUser方		法就是返第一次创建的象）
		    而饿汉式则是先将类类型的对象在静态初始化的时候就将其new出			来然后第一次 直到后来的每次都是返回的这个对象